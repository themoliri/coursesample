/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.curriculumcourse.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.impl.score.constraint.IntConstraintOccurrence;
import org.optaplanner.core.impl.score.constraint.ConstraintType;

import org.optaplanner.examples.curriculumcourse.domain.Course;
import org.optaplanner.examples.curriculumcourse.domain.Curriculum;
import org.optaplanner.examples.curriculumcourse.domain.CourseSchedule;
import org.optaplanner.examples.curriculumcourse.domain.Day;
import org.optaplanner.examples.curriculumcourse.domain.Lecture;
import org.optaplanner.examples.curriculumcourse.domain.Period;
import org.optaplanner.examples.curriculumcourse.domain.Room;
import org.optaplanner.examples.curriculumcourse.domain.Teacher;
import org.optaplanner.examples.curriculumcourse.domain.Timeslot;
import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;
import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Lectures: A missing or extra lecture of a course.
// This hard constraint is implemented a requirement by the initializer

// Conflicts: Two conflicting lectures in the same period.
// Three conflicting lectures count as 3 violations: one for each pair.
rule "conflictingLecturesDifferentCourseInSamePeriod"
    when
        $courseConflict : CourseConflict($leftCourse : leftCourse, $rightCourse : rightCourse)
        $leftLecture : Lecture(course == $leftCourse, $period : period, period != null)
        $rightLecture : Lecture(course == $rightCourse, period == $period, this != $leftLecture)
    then
        insertLogical(new IntConstraintOccurrence("conflictingLecturesDifferentCourseInSamePeriod", ConstraintType.HARD,
                -1,
                $leftLecture, $rightLecture));
end
rule "conflictingLecturesSameCourseInSamePeriod"
    when
        $leftLecture : Lecture($leftId : id, $leftCourse : course, $period : period, period != null)
        $rightLecture : Lecture(course == $leftCourse, period == $period, id > $leftId)
    then
        insertLogical(new IntConstraintOccurrence("conflictingLecturesSameCourseInSamePeriod", ConstraintType.HARD,
                -1,
                $leftLecture, $rightLecture));
end

// RoomOccupancy: Two lectures in the same room at the same period.
// Any extra lecture in the same period and room counts as one more violation.
rule "roomOccupancy"
    when
        $leftLecture : Lecture($leftId : id, period != null, $period : period, room != null, $room : room)
        // $leftLecture has lowest id of the period+room combo
        not Lecture(period == $period, room == $room, id < $leftId)
        // rightLecture has the same period
        $rightLecture : Lecture(period == $period, room == $room, id > $leftId, $rightId : id)
    then
        insertLogical(new IntConstraintOccurrence("roomOccupancy", ConstraintType.HARD,
                -1,
                $leftLecture, $rightLecture));
end

// Availabilities: Each lecture in a period unavailable for that course.
rule "unavailablePeriodPenalty"
    when
        $unavailablePeriodPenalty : UnavailablePeriodPenalty($course : course, $period : period)
        $lecture : Lecture(course == $course, period == $period)
    then
        insertLogical(new IntConstraintOccurrence("unavailablePeriodPenalty", ConstraintType.HARD,
                -1,
                $lecture));
end

// ############################################################################
// Soft constraints
// ############################################################################

// RoomCapacity: For each lecture, the number of students that attend the course should be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        $room : Room($capacity : capacity)
        $lecture : Lecture(room == $room, studentSize > $capacity, $studentSize : studentSize)
    then
        insertLogical(new IntConstraintOccurrence("roomCapacity", ConstraintType.SOFT,
                ($capacity - $studentSize),
                $room, $lecture));
end

// MinimumWorkingDays: The lectures of each course should be spread into a minimum number of days.
// Each day below the minimum counts as 5 points of penalty.
rule "minimumWorkingDays"
    when
        $course : Course($minWorkingDaySize : minWorkingDaySize)
        $dayCount : Number(intValue < $minWorkingDaySize) from accumulate(
            $day : Day()
            and exists Lecture(course == $course, day == $day),
            count($day)
        )
        // An uninitialized schedule should have no constraints broken
        exists Lecture(course == $course, period != null)
    then
        insertLogical(new IntConstraintOccurrence("minimumWorkingDays", ConstraintType.SOFT,
                (($dayCount.intValue() - $minWorkingDaySize) * 5),
                $course));
end

// CurriculumCompactness: Lectures belonging to a curriculum should be adjacent
// to each other (i.e., in consecutive periods).
// For a given curriculum we account for a violation every time there is one lecture not adjacent
// to any other lecture within the same day.
// Each isolated lecture in a curriculum counts as 2 points of penalty.
rule "curriculumCompactness"
    when
        $curriculum : Curriculum()

        $lecture : Lecture(curriculumList contains $curriculum,
            $day : day, $timeslotIndex : timeslotIndex, period != null
        )
        not Lecture(curriculumList contains $curriculum,
            day == $day, timeslotIndex == ($timeslotIndex - 1)
        )
        not Lecture(curriculumList contains $curriculum,
            day == $day, timeslotIndex == ($timeslotIndex + 1)
        )
    then
        insertLogical(new IntConstraintOccurrence("curriculumCompactness", ConstraintType.SOFT,
                -2,
                $lecture, $curriculum));
end

// RoomStability: All lectures of a course should be given in the same room.
// Each distinct room used for the lectures of a course, but the first, counts as 1 point of penalty.
rule "roomStability"
    when
        $course : Course()
        $roomCount : Number(intValue > 1) from accumulate(
            $room : Room()
            and exists Lecture(course == $course, room == $room),
            count($room)
        )
    then
        insertLogical(new IntConstraintOccurrence("roomStability", ConstraintType.SOFT,
                -($roomCount.intValue() - 1),
                $course));
end

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "accumulateHardScore"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardScore($hardTotal.intValue());
end

// Accumulate soft constraints
rule "accumulateSoftScore"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftScore($softTotal.intValue());
end
